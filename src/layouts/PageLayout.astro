---
import templates from "../review_templates/general";

interface Props {
  title: string;
}
const { title } = Astro.props;

let config_json = templates[Astro.currentLocale] || templates.en;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link
      rel="icon"
      type="image/svg+xml"
      href={"/steam-review-template/favicon.svg"}
    />
    <meta name="generator" content={Astro.generator} />
    <link rel="sitemap" href="/steam-review-template/sitemap-index.xml" />
    <title>{title}</title>
    <script
      defer
      data-domain="vojtastruhar.github.io/steam-review-template"
      src="https://analytics.vojtechstruhar.com/js/script.outbound-links.tagged-events.js"
    ></script>
  </head>
  <body>
    <slot />

    <div class="max-w-screen-sm mx-auto px-4">
      <pre id="output"></pre>
    </div>
    <footer class="bg-slate-700 text-white py-2 flex flex-col items-end">
      <p class="px-8">
        <a
          href="https://www.vojtechstruhar.com"
          target="_blank"
          class="text-white">Vojtěch Struhár</a
        >, 2021
      </p>
    </footer>
  </body>
</html>
<script lang="js" define:vars={{ config_json }}>
  var data = {};

  function showOutput() {
    copyButton?.style.setProperty("display", "block");
    let output = document.getElementById("output");
    if (output) {
      output.innerHTML = "";
      config_json.categories.forEach((category, index) => {
        if (
          document
            .getElementById(`field-${index}`)
            .getAttribute("data-hidden") === "true"
        ) {
          return;
        }
        output.innerHTML += `\n---{ ${category.title} }---\n`;
        category.options.forEach((item) => {
          if (
            category.type === "check" &&
            data[category.title].includes(item)
          ) {
            output.innerHTML += `☑ ${item}\n`;
          } else if (data[category.title] === item) {
            output.innerHTML += `☑ ${item}\n`;
          } else {
            output.innerHTML += `☐ ${item}\n`;
          }
        });
      });

      output.innerHTML += `\n`;
      output.innerHTML += `---{ ${config_json.author} }---\n`;
      output.innerHTML += `☑ https://janishutz.github.io/steam-review-template \n☑ https://vojtastruhar.github.io/steam-review-template (upstream, framework)`;
    }
  }

  let outputButton = document.getElementById("output-button");
  if (outputButton) {
    outputButton.addEventListener("click", showOutput);
  }
  let copyButton = document.getElementById("copy-output");
  if (copyButton) {
    copyButton.addEventListener("click", () => {
      navigator.clipboard.writeText(
        document.getElementById("output").innerText,
      );
    });
  }
  copyButton?.style.setProperty("display", "none");

  [...document.getElementsByTagName("input")].forEach((input) => {
    if (input.type == "checkbox") {
      data[input.name] = [];
    }
    input.addEventListener("change", (event) => {
      console.log("calling index.astro - L107:L128");
      let target = event.target;
      if (target) {
        if (target.type == "checkbox") {
          if (target.checked) {
            data[target.name].push(target.value);
          } else {
            data[target.name] = data[target.name].filter(
              (item) => item != target.value,
            );
          }
        } else {
          data[target.name] = target.value;
        }
      }
    });
  });

  config_json.categories.forEach((category, index) => {
    const categoryFieldset = document.getElementById(`field-${index}`);
    const categoryLegend = document.getElementById(`legend-${index}`);
    const toggleButton = document.getElementById(`hide-toggle-${index}`);

    toggleButton?.addEventListener("click", () => {
      const isHidden = categoryFieldset.getAttribute("data-hidden") === "true";

      categoryFieldset.setAttribute("data-hidden", !isHidden);
      toggleButton.innerText = isHidden ? "Hide" : "Show";

      toggleButton.classList.toggle("bg-red-400");
      toggleButton.classList.toggle("bg-gray-400");

      categoryLegend.classList.toggle("bg-emerald-300");
      categoryLegend.classList.toggle("bg-gray-400");
    });
  });
</script>

<style is:global>
  body {
    margin: 0;
    font-family: system-ui, sans-serif;
    line-height: 1.5;
    min-height: 100vh;
    background: #fff;
    color: #000;
  }
  html {
    font-family: system-ui, sans-serif;
  }
  code {
    font-family:
      Menlo,
      Monaco,
      Lucida Console,
      Liberation Mono,
      DejaVu Sans Mono,
      Bitstream Vera Sans Mono,
      Courier New,
      monospace;
  }
</style>
